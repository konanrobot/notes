常用操作------
git init
git remote add origin git@github.com:konanrobot/yourRepo.git
git add .
git commit -m "yel"
git config branch.master.remote origin  
git config branch.master.merge refs/heads/master 
git pull
git push origin master
------




2015-6-28修改
git init --初始化项目，刚开始初始化项目的时候使用
git clone --从服务器上克隆到本地，如果服务器上面已经有项目了，直接使用这个命令clone到本地进行使用。
git status --查看版本信息
git add  --添加本地文件
git commit --提交更改
git push --tags --将更改推送到服务器

1 Linux下Git和GitHub环境的搭建

第一步： 安装Git，使用命令 “sudo apt-get install git”

第二步： 创建GitHub帐号

第三步： 生成ssh key，使用命令 “ssh-keygen -t rsa -C "your_email@youremail.com"”，your_email是你的email

第四步： 回到github，进入Account Settings，左边选择SSH Keys，Add SSH Key,title随便填，粘贴key。

第五步： 测试ssh key是否成功，使用命令“ssh -T git@github.com”，如果出现You’ve successfully authenticated, but GitHub does not provide shell access 。这就表示已成功连上github。

第六步： 配置Git的配置文件，username和email

git config --global user.name "your name" //配置用户名

git config --global user.email "your email" //配置email

2 利用Git从本地上传到GitHub

第一步： 进入要所要上传文件的目录输入命令 “git init”

第二步： 创建一个本地仓库origin，使用命令 “git remote add origin git@github.com:yourName/yourRepo.git”
youname是你的GitHub的用户名，yourRepo是你要上传到GitHub的仓库

第三步： 比如你要添加一个文件xxx到本地仓库，使用命令 “git add xxx”，可以使用“git add .”自动判断添加哪些文件//添加当前目录及子目录中所有没被git管理的文件到git库中

然后把这个添加提交到本地的仓库，使用命令 ”git commit -m ”说明这次的提交“ “//提交修改到本地git库

最后把本地仓库origin提交到远程的GitHub仓库，使用命令 ”git push origin master“//git push将本地git库同步到服务器


------------------------------------------------------------------------------------------

当要push代码到git时，出现提示：

error:failed to push some refs to ...

Dealing with “non-fast-forward” errors
From time to time you may encounter this error while pushing:

    $ git push origin master  
    To ../remote/  
     ! [rejected]        master -> master (non-fast forward)  
    error: failed to push some refs to '../remote/'  

To prevent you from losing history, non-fast-forward updates were rejected
Merge the remote changes before pushing again.  See the 'non-fast forward'
section of 'git push --help' for details.
This error can be a bit overwhelming at first, do not fear. Simply put, git cannot make the change on the remote without losing commits, so it refuses the push. Usually this is caused by another user pushing to the same branch. You can remedy this by fetching and merging the remote branch, or using pull to perform both at once.
In other cases this error is a result of destructive changes made locally by using commands like git commit --amend or git rebase. While you can override the remote by adding --force to the push command, you should only do so if you are absolutely certain this is what you want to do. Force-pushes can cause issues for other users that have fetched the remote branch, and is considered bad practice. When in doubt, don’t force-push.


问题（Non-fast-forward）的出现原因在于：git仓库中已经有一部分代码（README.md），所以它不允许你直接把你的代码覆盖上去。于是你有2个选择方式：

1，强推，即利用强覆盖方式用你本地的代码替代git仓库内的内容

git push -f

2，先把git的东西fetch到你本地然后merge后再push

$ git fetch

$ git merge
这2句命令等价于

    $ git pull  

可是，这时候又出现了如下的问题：


上面出现的 [branch "master"]是需要明确(.git/config)如下的内容
[branch "master"]
    remote = origin

    merge = refs/heads/master
这等于告诉git2件事:

1，当你处于master branch, 默认的remote就是origin。
2，当你在master branch上使用git pull时，没有指定remote和branch，那么git就会采用默认的remote（也就是origin）来merge在master branch上所有的改变

如果不想或者不会编辑config文件的话，可以在bush上输入如下命令行：

    $ git config branch.master.remote origin  
    $ git config branch.master.merge refs/heads/master  

之后再重新git pull下。最后git push你的代码吧。it works now~

----------------------------------------------------------------------------------------------
要删掉仓库中的东西，则先在本地文件删掉
再git commit -a -m
再git push origin master
----------------------------------------------------------------------------------------------
 1. git clone url 将url提供的git库同步到本地

2. git commit -a 提交修改到本地git库

3. git add . 添加当前目录及子目录中所有没被git管理的文件到git库中

4. git mv a b 将文件a重命名为文件b

5. git push 将本地git库同步到服务器

6. git branch b1 新开分支b1

7. git branch -d b1 删除分支b1

8. git pull 将服务器git库同步到本地

9. git merge b1 合并b1分支的代码

10. git checkout b1 切换到b1分支

11. git checkout file 将file从本地git库中提取出来(比如误删了某个文件，可以重新从本地库中提取出来)

12. git status 查看当前状态

13. git stash 隐藏当前修改，回到checkout时的状态(当修改了一部分内容，想尝试另一种方法，又不想放弃当前修改，可以先隐藏当前修改)

14. git apply 应用已经隐藏的修改

15. git help command 查看某条命令的帮助，比如要看stash命令的详细用法：git help stash
